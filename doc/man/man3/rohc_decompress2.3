.\" File automatically generated by doxy2man0.1
.\" Generation date: dim. ao√ªt 9 2015
.TH rohc_decompress2 3 2015-08-09 "ROHC" "ROHC library Programmer's Manual"
.SH "NAME"
rohc_decompress2 \- Decompress the given ROHC packet into one uncompressed packet.
.SH SYNOPSIS
.nf
.B #include <rohc/rohc_decomp.h>
.sp
\fBint rohc_decompress2\fP(
    \fBstruct rohc_decomp *const   decomp\fP,
    \fBconst struct rohc_ts        arrival_time\fP,
    \fBconst unsigned char *const  rohc_packet\fP,
    \fBconst size_t                rohc_packet_len\fP,
    \fBunsigned char *const        uncomp_packet\fP,
    \fBconst size_t                uncomp_packet_max_len\fP,
    \fBsize_t *const               uncomp_packet_len\fP
);
.fi
.SH DESCRIPTION
.PP 
The function may succeed in three different ways: 
.PP 
.RS
.PP 
\(bu return \fBROHC_OK\fP and a decompressed IP packet, 
.PP 
\(bu return \fBROHC_FEEDBACK_ONLY\fP and no decompressed IP packet if the ROHC packet contains only feedback information, 
.PP 
\(bu return \fBROHC_NON_FINAL_SEGMENT\fP and no decompressed IP packet if the ROHC packet is a non-final ROHC segment, ie. the ROHC packet is not the last segment of a larger, segmented ROHC packet.
.PP 
.RE
.PP 
do not use this function anymore, use rohc_decompress3() instead
.SH PARAMETERS
.TP
.B decomp
The ROHC decompressor 
.TP
.B arrival_time
The time at which packet was received (0 if unknown, or to disable time-related features in the ROHC protocol) 
.TP
.B rohc_packet
The compressed packet to decompress 
.TP
.B rohc_packet_len
The size of the compressed packet (in bytes) 
.TP
.B uncomp_packet
The buffer where to store the decompressed packet 
.TP
.B uncomp_packet_max_len
The maximum length (in bytes) of the buffer for the decompressed packet 
.TP
.B uncomp_packet_len [output]
The length (in bytes) of the decompressed packet 
.SH STRUCTURES
.SS "A timestamp for the ROHC library"
.PP
.sp
.PP 
Could be easily created from \fBstruct\fP \fBtimespec\fP...
.PP 
 
.sp
.RS
.nf
struct \fBrohc_ts\fP {
  uint64_t \fIsec\fP;  /* The seconds part of the timestamp */
  uint64_t \fInsec\fP; /* The nanoseconds part of the timestamp */
};
.fi
.RE
.SH RETURN VALUE
.PP
Possible return values: 
.RS

\(bu \fBROHC_OK\fP if a decompressed packet is returned 

\(bu \fBROHC_FEEDBACK_ONLY\fP if the ROHC packet contains only feedback data 

\(bu \fBROHC_NON_FINAL_SEGMENT\fP if the given ROHC packet is a partial segment of a larger ROHC packet 

\(bu \fBROHC_ERROR_NO_CONTEXT\fP if no decompression context matches the CID stored in the given ROHC packet and the ROHC packet is not an IR packet 

\(bu \fBROHC_ERROR_PACKET_FAILED\fP if the decompression failed because the ROHC packet is unexpected and/or malformed 

\(bu \fBROHC_ERROR_CRC\fP if the CRC detected a transmission or decompression problem 

\(bu \fBROHC_ERROR\fP if another problem occurred


.RE


.SH EXAMPLE
.nf
struct rohc_decomp *decompressor;       /* the ROHC decompressor */
ruct rohc_ts arrival_time = { .sec = 0, .nsec = 0 };
 char rohc_packet[BUFFER_SIZE]; // the buffer that will contain
                                // the ROHC packet to decompress
ohc_packet_len;                 // the length (in bytes) of the
                                // ROHC packet
 char ip_packet[BUFFER_SIZE];   // the buffer that will contain
                                // the decompressed IPv4 packet
p_packet_len;                   // the length (in bytes) of the
                                // decompressed IPv4 packet

hc_decompress2(decompressor, arrival_time,
               rohc_packet, rohc_packet_len,
               ip_packet, BUFFER_SIZE, &ip_packet_len);
= ROHC_FEEDBACK_ONLY)

// success: no decompressed IP data available in ip_packet because
// the ROHC packet contained only feedback data

ret == ROHC_NON_FINAL_SEGMENT)

// success: no decompressed IP data available in ip_packet because the
// ROHC packet was a non-final segment (at least another segment is
// required to be able to decompress the full ROHC packet)

ret == ROHC_OK)

// success: ip_packet_len bytes of decompressed IP data available in
// ip_packet



// failure: decompressor failed to decompress the ROHC packet
fprintf(stderr, "decompression of fake ROHC packet failed\n");




.fi
.SH SEE ALSO
.BR rohc_decomp.h (3),
.BR ROHC_OK (3),
.BR ROHC_FEEDBACK_ONLY (3),
.BR ROHC_NON_FINAL_SEGMENT (3),
.BR ROHC_ERROR_NO_CONTEXT (3),
.BR ROHC_ERROR_PACKET_FAILED (3),
.BR ROHC_ERROR_CRC (3),
.BR ROHC_ERROR (3),
.BR rohc_decomp_set_mrru (3)
