Libraries and tools
-------------------

Configure the libraries and tools:

 $ ./configure --prefix=/path/to/installation/directory

  (use ./autogen.sh if you are building from the source repository)

Build the libraries and tools:

 $ make all

If you want to run non-regression tests:

 $ make check

Install the libraries and tools:

 $ make install

The libraries are now located in the /path/to/installation/directory/lib
directory, the header files in the /path/to/installation/directory/include
directory and the tools in the /path/to/installation/directory/bin directory.

In case of problem:
 - check you got the last release of the library (see README),
 - contact the mailing list (see README),
 - check the bugtracker for known bugs (see README).


Documentation
-------------

HTML documentation can be generated from the source code thanks to Doxygen:

 $ ./configure --enable-doc
 $ make html

Open the ./doc/html/index.html file in your favorite web browser.


Non-regression tool
-------------------

Please, note that the non-regression tool is often used through the "make check"
command or the report tool described below because their interfaces are simplier.

Run the non-regression tool:

 $ ./test/test <source PCAP file>

The application:
 - outputs the results (status & logs) in XML on stdout,
 - optionally outputs the ROHC packets in a PCAP file,
 - optionally compares the generated ROHC packets with ROHC packets given as
   input.

For usage details, run:

 $ ./test/test -h


HTML report
-----------

To generate an HTML report of several predefined non-regression tests:

1. For each predefined test, create an new directory in the test/report/samples/
   directory and put the source.pcap (= IP flow) and the rohc.pcap (= dump of
   previously generated ROHC packets) into it. The report script will call the
   test application with the source.pcap and rohc.pcap files as input.

2. Edit the report configuration file to point to the directories defined in
   step 1. The configuration format is easy to understand.

 $ vim test/report/report.conf

3. Generate the HTML report:

 $ make report

4. Load the ./test/report/report.html file in your favorite browser and watch
   the results. In case of failure, the HTML page shows the logs, so you can
   find out the problem or report it on the mailing list or bugtracker.

IMPORTANT: Run the report script after every library modification to avoid
           regressions.


Test and Statistic tool
-----------------------

1. Go to the subdirectory

 $ cd statistics

2. Execute the script

 $ ./auto.pl

Answer questions of the script (number of tests...)

3. Load the ./statistics/stats.html file in your favorite browser and watch the
   results.

